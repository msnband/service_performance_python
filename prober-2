#!/usr/bin/env python3

# Simple Service Performance implemented by python-version3 written by Mohammad Hossein Abdsharifi
#Ensure you;ve got installed python3 in a Linux machine.
#Input format should be as follow: 
#python3 prober.py <Agent IP:port:community> <sample frequency> <samples> <OID1> <OID2> …….. <OIDn> 
#IP, port and community are agent details
#OIDn are the OIDs to be probed 
#Sample frequency  (Fs) is the sampling frequency expressed in Hz, you ought to handle between 10 and 0.1 Hz 
#Samples (N) is that the number of successful samples the solution should do before terminating 

# importing required libraries 
from easysnmp import snmp_get, snmp_walk, Session
import sys
import time
import math

# Defining varibles and lists and geting data from user input
deviceInfo = sys.argv[1]
s = deviceInfo.split(':')
device_ip = s[0] # agent ip number
device_port = s[1] # agent port number
device_community = s[2] # community number
device_frequency = float(sys.argv[2])
instance_clock = 1/device_frequency # Calculating sample time in OID
instance = int(sys.argv[3])
OID = [] # List for keeping OID values
old_OID = [] # Defining empty list to stay OID values for further calculations
current_OID = []

for items in range(4, len(sys.argv)): # Get and save the quantity of OID's inserted by user in command line
    OID.append(sys.argv[items])
OID.insert(0, '1.3.6.1.2.1.1.3.0')

def prober(): # Main Funtion

    global current_time # making visible from outside function
    global current_OID # making visible from outside function
    session = Session(hostname=device_ip,remote_port=device_port,community='public',version=2,timeout=1,retries=1)
    reply = session.get(OID)
    old_OID = []

    for extract_oid in range(1, len(reply)):
        #OID_math = (extract_oid - 1)
        if reply[extract_oid].value!= 'NOSUCHOBJECT' and reply[extract_oid].value!='NOSUCHINSTANCE':
            old_OID.append(int(reply[extract_oid].value))
            
            if count!=0 and len(current_OID)>0:
                OID_diffrential = int(old_OID[extract_oid - 1]) - int(current_OID[extract_oid - 1])
                time_differentila = round(old_time - current_time, 1)
                OID_rate = int(OID_diffrential / time_differentila)
                if OID_rate < 0:
                    if reply[extract_oid].snmp_type == 'COUNTER32':
                        OID_diffrential = OID_diffrential + 2**32
                        # print out resutls in required format
                        print(str(old_time) + "|" + str(OID_diffrential / time_differentila) + "|")  
                    elif reply[extract_oid].snmp_type == 'COUNTER64':
                        OID_diffrential = OID_diffrential + 2**64
                        # print out resutls in required format
                        print(str(old_time) + "|" + str(OID_diffrential / time_differentila) + "|")
                else:
                    # print out resutls in required format
                    print(str(old_time) + "|" + str(OID_rate) + "|")
########################################
    current_OID = old_OID
    current_time = old_time

if instance == -1:
    count = 0
    current_OID = []
    while True:
        old_time = (time.time())
        prober()
        reply_time = (time.time())
        count = count +1
        # Time for next probe
        time.sleep(abs(instance_clock - reply_time + old_time))
else:
    current_OID = []
    for count in range(0, instance + 1):
        old_time = time.time()
        prober()
        reply_time = time.time()
        # Time for next probe
        time.sleep(abs(instance_clock - reply_time + old_time))
########################################
